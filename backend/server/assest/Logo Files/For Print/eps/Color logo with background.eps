%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2406 1306
%%HiResBoundingBox: 0 0 2405.04 1305.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2405.04 1305.12 re
W
q
[0.24 0 0 -0.24 0 1305.12] cm
q
0 0 10020.833 5436.9346 re
W*
q
[3.124769 0 0 3.125167 0.0115757 0] cm
/DeviceRGB {} CS
[0.1059 0.1059 0.1059] SC
/DeviceRGB {} cs
[0.1059 0.1059 0.1059] sc
0 0 3206.8965 1740.726 re
f
Q
q
[46.195744 0 0 46.201626 2657.3843 -530.46661] cm
/DeviceRGB {} CS
[0.3843 0.7569 0.749] SC
/DeviceRGB {} cs
[0.3843 0.7569 0.749] sc
31.805 41.952999 m
31.805 36.455997 34.248001 31.382999 38.351002 27.313999 c
38.113003 27.309999 37.877003 27.300999 37.639 27.300999 c
21.024 27.300999 7.552 37.249001 7.552 49.521999 c
7.552 58.882 15.389 66.882004 26.478001 70.155998 c
25.893002 82.759995 l
34.586002 71.743996 l
34.586002 71.743996 36.228001 71.743996 37.639004 71.743996 c
45.564003 71.743996 52.768005 69.476997 58.141006 65.778992 c
43.185001 63.724998 31.805 53.826 31.805 41.952999 c
h
f
76.966003 82.061996 m
65.016006 66.922997 l
62.935005 66.922997 l
45.242004 66.922997 30.846004 56.057999 30.846004 42.699997 c
30.846004 29.344997 45.242004 18.478996 62.935005 18.478996 c
80.626007 18.478996 95.020004 29.344997 95.020004 42.699997 c
95.020004 52.336998 87.672005 60.871998 76.163002 64.778 c
76.966003 82.061996 l
h
62.935001 22.48 m
47.448002 22.48 34.846001 31.550999 34.846001 42.701 c
34.846001 53.850998 47.448002 62.924 62.935001 62.924 c
66.956001 62.924 l
72.392998 69.813004 l
72.023994 61.864002 l
73.527992 61.421001 l
84.153 58.280998 91.019997 50.934002 91.019997 42.701 c
91.019997 31.551001 78.420998 22.48 62.935001 22.48 c
h
f
Q
q
[88.956017 0 0 88.967354 253.99942 3321.4048] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
6.54 20.18 m
4.62 20.18 2.16 19.639999 1.36 19.34 c
2.06 17.460001 l
2.8 17.740002 5.900001 18.380001 7.360001 18.120001 c
7.860001 18.040001 8.26 17.58 8.34 17.060001 c
8.42 16.380001 7.92 15.720001 6.94 15.260001 c
6.34 14.980001 5.22 14.500001 4.32 14.120001 c
3.8 13.900001 3.34 13.700001 3.06 13.580001 c
2.34 13.260001 1.74 12.760001 1.34 12.180001 c
0.96 11.600001 0.76 10.940002 0.78 10.260001 c
0.8 9.620001 1 9.020001 1.38 8.500001 c
1.76 7.960001 2.3 7.560001 2.94 7.320001 c
3.8 6.980001 5.04 6.980001 6.62 7.260001 c
7.82 7.500001 8.9 7.840001 9.36 8.000001 c
8.66 9.880001 l
8.3 9.740001 7.32 9.440002 6.24 9.240001 c
4.599999 8.920001 3.88 9.1 3.66 9.18 c
3.12 9.38 2.8 9.8 2.78 10.320001 c
2.76 10.900001 3.18 11.440001 3.88 11.76 c
4.139999 11.860001 4.599999 12.06 5.12 12.280001 c
6.02 12.68 7.16 13.160001 7.8 13.460001 c
8.72 13.900001 9.400001 14.460001 9.84 15.160001 c
10.26 15.840001 10.42 16.580002 10.32 17.34 c
10.139999 18.719999 9.06 19.84 7.72 20.08 c
7.36 20.139999 6.96 20.18 6.54 20.18 c
h
20.1 7.22 m
22.1 7.22 l
22.1 20 l
20.1 20 l
20.1 14.18 l
14.540001 14.18 l
14.540001 20 l
12.540001 20 l
12.540001 7.22 l
14.540001 7.22 l
14.540001 12.18 l
20.1 12.18 l
20.1 7.22 l
20.1 7.22 l
h
26.24 20 m
24.16 20 l
27.84 7.22 l
30.860001 7.22 l
34.560001 20 l
32.460003 20 l
31.380003 16.24 l
27.020002 17.26 l
26.24 20 l
h
29.360001 9.18 m
27.66 15.06 l
30.82 14.3 l
29.360001 9.18 l
h
44.099998 20 m
44.019997 18.200001 42.879997 17.08 41.239998 15.719999 c
38.48 15.719999 l
38.48 20 l
36.48 20 l
36.48 7.22 l
37.860001 7.22 l
38.48 7.22 l
41.959999 7.22 l
42.52 7.22 43.040001 7.32 43.559998 7.500001 c
44.059998 7.7 44.539997 8 44.919998 8.360001 c
45.779999 9.160001 46.259998 10.26 46.259998 11.460001 c
46.259998 12.680001 45.779999 13.780001 44.919998 14.560001 c
44.599998 14.880001 44.219997 15.120002 43.82 15.320002 c
44.16 15.660002 44.48 16.000002 44.779999 16.400001 c
45.619999 17.480001 46.039997 18.640001 46.099998 19.920002 c
46.099998 20.000002 l
44.099998 20.000002 l
44.099998 20 l
h
38.48 13.72 m
41.959999 13.72 l
43.079998 13.72 44.259998 12.92 44.259998 11.46 c
44.259998 10 43.079998 9.22 41.959999 9.22 c
38.48 9.22 l
38.48 13.72 l
h
50.32 17.98 m
55.739998 17.98 l
55.739998 19.98 l
48.32 19.98 l
48.32 7.2 l
55.279999 7.2 l
55.279999 9.2 l
50.32 9.2 l
50.32 12.16 l
54.919998 12.16 l
54.919998 14.16 l
50.32 14.16 l
50.32 17.98 l
h
66.580002 13.22 m
67.520004 13.940001 68.020004 14.980001 68.020004 16.1 c
68.020004 17.24 67.520004 18.280001 66.580002 19 c
65.779999 19.66 64.700005 20 63.600002 20 c
57.940002 20 l
57.940002 7.22 l
62.960003 7.22 l
63.940002 7.22 64.860001 7.52 65.580002 8.1 c
66.419998 8.76 66.860001 9.66 66.860001 10.68 c
66.860001 11.480001 66.580002 12.24 66.040001 12.84 c
66.220001 12.96 66.419998 13.08 66.580002 13.22 c
h
62.959999 9.22 m
59.939999 9.22 l
59.939999 12.14 l
62.959999 12.14 l
63.899998 12.14 64.860001 11.6 64.860001 10.68 c
64.860001 9.76 63.900002 9.22 62.959999 9.22 c
h
63.599998 18 m
64.779999 18 66.019997 17.299999 66.019997 16.1 c
66.019997 14.92 64.779999 14.200001 63.599998 14.200001 c
59.939999 14.200001 l
59.939999 18 l
63.599998 18 l
h
79.699997 8.9 m
80.619995 10.04 81.099998 11.62 81.099998 13.599999 c
81.099998 15.579999 80.619995 17.16 79.699997 18.299999 c
79.199997 18.92 78.559998 19.379999 77.82 19.699999 c
77.080002 20.019999 76.239998 20.179998 75.300003 20.179998 c
74.360008 20.179998 73.520004 20.019999 72.780006 19.699999 c
72.040009 19.379999 71.400009 18.919998 70.900009 18.299999 c
69.980011 17.16 69.500008 15.579999 69.500008 13.599999 c
69.500008 11.62 69.980011 10.039999 70.900009 8.9 c
71.400009 8.28 72.040009 7.8 72.780006 7.48 c
73.520004 7.159999 74.360008 7 75.300003 7 c
76.239998 7 77.080002 7.159999 77.82 7.48 c
78.559998 7.8 79.199997 8.28 79.699997 8.9 c
h
78.160004 17.040001 m
78.780006 16.280001 79.100006 15.080001 79.100006 13.6 c
79.100006 12.1 78.780006 10.92 78.160004 10.16 c
77.540001 9.4 76.580002 9 75.300003 9 c
74.040001 9 73.080002 9.4 72.460007 10.16 c
71.840012 10.92 71.500008 12.1 71.500008 13.6 c
71.500008 15.08 71.840004 16.280001 72.460007 17.040001 c
73.080009 17.800001 74.040009 18.18 75.300003 18.18 c
76.580002 18.18 77.540001 17.800001 78.160004 17.040001 c
h
92.68 8.9 m
93.599998 10.04 94.080002 11.62 94.080002 13.599999 c
94.080002 15.579999 93.599998 17.16 92.68 18.299999 c
92.18 18.92 91.540001 19.379999 90.800003 19.699999 c
90.060005 20.019999 89.220001 20.179998 88.280006 20.179998 c
87.340012 20.179998 86.500008 20.019999 85.76001 19.699999 c
85.020012 19.379999 84.380013 18.919998 83.880013 18.299999 c
82.960014 17.16 82.480011 15.579999 82.480011 13.599999 c
82.480011 11.62 82.960014 10.039999 83.880013 8.9 c
84.380013 8.28 85.020012 7.8 85.76001 7.48 c
86.500008 7.159999 87.340012 7 88.280006 7 c
89.220001 7 90.060005 7.159999 90.800003 7.48 c
91.540001 7.8 92.18 8.28 92.68 8.9 c
h
91.139999 17.040001 m
91.760002 16.280001 92.080002 15.080001 92.080002 13.6 c
92.080002 12.1 91.760002 10.92 91.139999 10.16 c
90.519997 9.4 89.559998 9 88.279999 9 c
87.019997 9 86.059998 9.4 85.440002 10.16 c
84.820007 10.92 84.480003 12.1 84.480003 13.6 c
84.480003 15.08 84.82 16.280001 85.440002 17.040001 c
86.060005 17.800001 87.020004 18.18 88.279999 18.18 c
89.559998 18.18 90.519997 17.800001 91.139999 17.040001 c
h
101.239998 12.8 m
106.159996 19.98 l
103.739998 19.98 l
99.699997 14.099999 l
98.839996 14.879999 98.18 15.679999 98.079994 16.719999 c
98.079994 19.98 l
96.079994 19.98 l
96.079994 7.179999 l
98.079994 7.179999 l
98.079994 12.859999 l
98.559998 12.419999 99.059998 11.999999 99.559998 11.579999 c
101.099998 10.319999 102.559998 9.119999 102.68 7.179999 c
104.699997 7.179999 l
104.639999 8.439999 104.199997 9.579999 103.379997 10.659999 c
102.759995 11.479999 102 12.159999 101.239998 12.799999 c
101.239998 12.8 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
